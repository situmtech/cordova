# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

pr: none

variables:
- group: Passwords
- group: SoftwareVersions

parameters:
   - name: version
     displayName: Plugin version (Only required for Release)
     default: "0.0.0"
    

jobs:
- ${{ if or(contains(variables['Build.SourceBranch'], '1feature/'), contains(variables['Build.SourceBranch'],'develop')) }}:
  - job: Test_iOS
    pool:
      vmImage: $(macOSVersion)
      
    steps:
    - bash: |
        echo -e "\n[+] Set xcode version to $(xcodeVersion)"
        sudo xcode-select -switch $(xcodeVersion)

        echo -e "\n[+] Copy JSON test files \n"
        tests/scripts/copy_ios_resources.sh

        echo -e "\n[+] Pod install \n"
        cd src/ios 
        pod install
        
        echo -e "\n[+] Execute xcode tests \n"

        xcodebuild test -workspace SitumCordovaPlugin.xcworkspace -scheme CordovaLib -destination $(iosSimulator) | xcpretty --report junit



      displayName: Execute Tests
  
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'src/ios/build/reports/junit.xml'
      displayName: Publish test
  
  - job: Test_Android
    pool:
      vmImage: $(ubuntuVersion)

    steps:      
    - bash: |
        echo -e "\n[+] Copy JSON test files \n"
        tests/scripts/copy_android_resources.sh
        
        echo -e "\n[+] Execute gradle tests \n"
        cd src/android 
        ./gradlew test --continue --info
      displayName: Execute Test

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'src/android/app/build/test-results/*/*.xml'
      displayName: Publish test
      condition: always()
  
- ${{ if contains(variables['Build.SourceBranch'], 'feature/SIS-631') }}:
  - job:
      pool:
        vmImage: $(ubuntuVersion)
      steps:

        - task: NodeTool@0
          inputs:
            versionSource: 'spec' # 'spec' | 'fromFile'. Required. Source of version. Default: spec.
            versionSpec: $(nodeVersion)

        - bash: |

            echo -e "\n[+] Installing NPM version $(npmVersion)\n"
            npm install -g $(npmVersion)

            echo -e "\n[+] Install npm dependencies \n"
            npm install

            echo -e "\n[+] Execute npm tests \n"
            npm test
          displayName: JS Test
       
        - bash: |
            echo -e "\n[+] Generate Documentation\n"
            npm run jsdoc

          displayName: Generate JSDoc
           
