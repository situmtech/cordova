# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

pr: none

variables:
- group: Passwords
- group: SoftwareVersions

parameters:
   - name: version
     displayName: Plugin version

jobs:
- ${{ if or(contains(variables['Build.SourceBranch'], 'feature/'), contains(variables['Build.SourceBranch'],'develop')) }}:
  - job: Test iOS
    pool:
      vmImage: $(macOSVersion)
      
    steps:
    - bash: |
        echo -e "\n[+] Set xcode version to $(xcodeVersion)"
        sudo xcode-select -switch $(xcodeVersion)

        echo -e "\n[+] Copy JSON test files \n"
        tests/scripts/copy_ios_resources.sh

        echo -e "\n[+] Pod install \n"
        cd src/ios 
        pod install
        
        echo -e "\n[+] Execute xcode tests \n"

        xcodebuild test -workspace SitumCordovaPlugin.xcworkspace -scheme CordovaLib -destination $(iosSimulator) | tee -a reports.xcresults

        echo -e "\n[+] Convert tests to JUNIT \n"
        cat reports.xcresults | xcpretty --report junit > reports.xml
      displayName: Execute Tests
  
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'src/ios/reports.xml'
      displayName: Publish test
  
  - job: Test Android
    steps:      
    - bash: |
        echo -e "\n[+] Copy JSON test files \n"
        tests/scripts/copy_android_resources.sh
        
        echo -e "\n[+] Execute gradle tests \n"
        cd src/android 
        ./gradlew test --continue --info
      displayName: Execute Test

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'src/android/app/build/test-results/*/*.xml'
      displayName: Publish test
      condition: always()
  
- ${{ if or(contains(variables['Build.SourceBranch'], 'release/'), contains(variables['Build.SourceBranch'],'master')) }}:
  - job: docker_job    
  
    steps:
    - script: |
          npm install
          npm test
      displayName: JS Test
   
    - script: |
           npm run jsdoc
      displayName: Generate JSDoc
       
    - script: |
           zip -r JSDoc ./docs/JSDoc/*
      displayName: Archive artifacts
   
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: 'JSDoc.zip'
        artifactName: 'JSDoc' 
      displayName: Archive
